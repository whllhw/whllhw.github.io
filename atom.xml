<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>仰头45℃爆笑</title>
  
  <subtitle>生活不止眼前的苟且，还有读不懂的诗和到不了的远方</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://whllhw.xyz/"/>
  <updated>2019-04-14T13:05:22.070Z</updated>
  <id>https://whllhw.xyz/</id>
  
  <author>
    <name>whllhw</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Servlet学习总结</title>
    <link href="https://whllhw.xyz/posts/2019/04/01/Servlet%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>https://whllhw.xyz/posts/2019/04/01/Servlet学习总结/</id>
    <published>2019-03-31T16:17:30.000Z</published>
    <updated>2019-04-14T13:05:22.070Z</updated>
    
    <content type="html"><![CDATA[<h1>前言</h1><p>Spring Boot 中的spring-boot-web-starter中默认配置的Web容器就是Tomcat，而Tomcat是实现了Servlet规范的Web容器，以前在项目中经常用到，但是由于Spring Boot的约定先于配置大大隐藏了Tomcat的复杂性，还有Servlet的一些底层实现，导致在项目用到一些Servlet的东西却不知道其接口之间的关系。加上最近找实习也遇到面试官问这些问题，之前零散在网上看的不系统，回答的时候有点懵，于是花了一天去较为系统的了解这个Java Web中的重要接口。</p><h1>思维导图</h1><p>先看看我导图，然后再自底向上一一道来，归纳得不全，只有常见的接口，接口的实现也没有时间细看。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-a441953f2f80b8b2.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="Servlet" title="">                </div>                <div class="image-caption">Servlet</div>            </figure><h1>什么是Servlet？</h1><p>Servlet（server applet）是JavaEE（位于javax.servlet）中的编程规范，用在浏览器与Java之间访问交互，只需要实现了Servlet就可以在任意符合其规范的Web容器应用服务器（Tomcat JBoss Wildfly）中运行你的后端代码。从而实现了一次编写到处部署（面向接口编程的好处）！</p><h1>Servlet有哪些常见的接口？</h1><h2 id="servlet接口">Servlet接口</h2><p>留给程序员去实现的一个重要接口，编写业务逻辑，SQL查询之类的</p><ol><li><strong>void init(ServletConfig config)</strong></li></ol><ul><li>servlet 初始化方法，在用户访问时会实例化，该方法会被首次调用，可用于资源连接、打log</li></ul><ol start="2"><li><strong>void destory()</strong></li></ol><ul><li>对象被销毁时调用，放一些资源关闭的一些代码</li></ul><ol start="3"><li><strong>void service(ServletRequest req,ServletResponse res)</strong></li></ol><ul><li>最重要的一个方法，当请求到来的时候会实例出Request Response并调用该方法，常常在这里实现业务逻辑了</li></ul><h2 id="servletconfig接口">ServletConfig接口</h2><p>用于初始化Servlet对象时使用，已由Tomcat实现。</p><ol><li>读取web.xml中的配置信息__init-param__表示，可以用于配置数据库连接等信息。<br>2 . 获取ServletContext</li></ol><h2 id="servletcontext接口">ServletContext接口</h2><p>一个完整的webapp的应用上下文，已由Tomcat实现。<br>启动时创建，服务关闭时被摧毁。可存放__context-param__环境变量、运行时全局共享的一些数据。</p><h2 id="httpservlet抽象类">HttpServlet抽象类</h2><p>继承自GenericServlet（implements Servlet）的抽象类，提供了一些通用的实现：</p><ol><li>ServletConfig在init时保存为引用</li><li>在service实现HTTP请求方式的解析和分发调用算法</li><li><strong>doGet</strong>、__doPost__等方法默认抛出405错误（不支持的请求方式）</li><li>实现HTTP请求头的缓存信息解析</li><li>强制把ServletRequest转换成HttpServletRequest调用service方法</li></ol><h2 id="httpservletrequest接口">HttpServletRequest接口</h2><p>继承自__ServletRequest__，添加了HTTP协议的接口，在__service__方法中使用。添加了：</p><ol><li>url的参数获取（表单、url）</li><li>获取remoteIp</li><li>获取转发器（res.getRequestDispatcher(&quot;/b&quot;).forward(req,res)）</li><li>重定向(res.sendRedirect）与转发器的区别</li><li>getCookie</li><li>getSession</li></ol><h2 id="httpservletresponse">HttpServletResponse</h2><p>继承自ServletResponse，同样拓展了HTTP相关的东西，如：</p><ol><li>sendError发送HTTP状态码和信息</li><li>getOutPutStream</li><li>addCookie</li></ol><h2 id="httpsession接口">HttpSession接口</h2><p>可用__HttpServletRequest.getSession()__获取当前连接的会话。</p><ol><li>获取sessionId</li><li>获取过期时间</li><li>setAttribute、getAttribute、removeAttribute存放会话数据</li></ol><h2 id="cookie接口">Cookie接口</h2><p>可用__HttpServletRequest.getCookie()__获取当前连接的cookie，__res.addCookie__发送给浏览器cookie</p><ol><li>setPath，以最后的斜杠匹配，默认为当前uri发送（/a/b/c匹配/a/b/）</li><li>setMaxAge，过期时间（=0直接删除，&lt;0不存储，&gt;0x秒失效）</li></ol><h1>运行时接口对应关系</h1><ol><li>一个Servlet对象对应一个Config，在web.xml定义的每个servlet的配置</li><li>一个webapp对应ServletContext，所有servlet共享同一个，在web.xml配置整个webapp的配置</li><li>一个请求对应HttpServletRequest，HttpServletResponse，每次请求创建不同的对象</li><li>一个会话对应一个HttpSession，可包含用户的多个请求</li></ol><h1>各接口的生命周期？</h1><h2 id="servlet-httpservlet">Servlet/HttpServlet</h2><ol><li>启动时默认不会被实例化（除非配置load-up-startup）</li><li>用户访问地址</li><li>Web容器解析出对应uri，在容器上下文寻找对应的servlet</li><li>找到则调用其service方法</li><li>没找到则通过web.xml文件的配置获取完整类型，通过反射实例化</li><li>实例化时会执行无参构造方法</li><li>传入ServletConfig到init方法</li><li>最后调用service方法</li><li>销毁：web容器关闭、webapp重新部署、长时间无访问时，则调用destroy()做销毁前的准备</li></ol><h2 id="servletcontext">ServletContext</h2><p>解析web.xml时创建，服务启动时被创建，关闭时销毁。</p><h2 id="httpservletrequest-httpservletresponse">HttpServletRequest HttpServletResponse</h2><p>一次请求对应一个对象，完成请求则销毁</p><h1>我该选择哪个Servlet类去实现？</h1><p>HttpServlet。Servlet接口定义了基本方法，GenericServlet是实现了部分方法的抽象类，查看源码可知：</p><ol><li>实现init(ServletConfig config)，保存了config的引用，并设计一个空的init()供重写</li><li>实现service(ServletRequest request,ServletResponse response)，提供service(HttpServletRequest request, HttpServletResponse response)供重写，避免每次进行转型调用</li></ol><p>HttpServlet是继承GenericServlet的抽象方法，提供了HTTP的更多实现，包括</p><ol><li>在service方法中解析HTTP请求方式，分发GET到doGet，分发POST到doPost。</li><li>提供doXX的默认实现，发送405/400的错误，表示不支持的请求方式。子类需要重写这些方法去支持（巧妙！）</li><li>doGet方法调用前，进行了缓存检查，当未过期时返回304 not modify 表示资源未更改</li></ol><h1>Servlet GenericServlet HttpServlet  体现了什么设计模式？有什么好处？</h1><p>模板方法。HttpServlet是一个模板类，实现了核心算法骨架，doGet doPost 具体实现步骤要在子类中完成。</p><p>特点：doXX，doYY</p><p>作用：</p><ul><li>核心算法保护</li><li>核心算法复用</li><li>不改变算法前提下重新定义算法步骤的具体实现</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;Spring Boot 中的spring-boot-web-starter中默认配置的Web容器就是Tomcat，而Tomcat是实现了Servlet规范的Web容器，以前在项目中经常用到，但是由于Spring Boot的约定先于配置大大隐藏了Tom
      
    
    </summary>
    
    
      <category term="java" scheme="https://whllhw.xyz/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>DonkeyCar总结</title>
    <link href="https://whllhw.xyz/posts/2019/01/14/DonkeyCar%E6%80%BB%E7%BB%93/"/>
    <id>https://whllhw.xyz/posts/2019/01/14/DonkeyCar总结/</id>
    <published>2019-01-13T16:24:51.000Z</published>
    <updated>2019-04-14T13:05:22.058Z</updated>
    
    <content type="html"><![CDATA[<p>考完试，终于有时间把这个学期初的坑填上了。还有几位朋友专门关注了我想知道最新的进展，很抱歉啊很久没有消息，也没有什么大进展，下面就说说目前做了的事情和效果。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-ae056cd767caa94d.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="DonkeyCar俯视图" title="">                </div>                <div class="image-caption">DonkeyCar俯视图</div>            </figure><h1>硬件组装</h1><ol><li>由于3D打印比较贵，就让队友做了一个简易的车架，把必要的设备上去了，不够美观，但是够用了。</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-c513dfd15e9cdc11.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="DonkeyCar正视图" title="">                </div>                <div class="image-caption">DonkeyCar正视图</div>            </figure><h1>场地</h1><p>由于没有比较好的地方，而且学校智能车的赛道这学期还没有开放。按照slack上Donkeycar网友给出的图纸，临时画了些线在纸上，可能是场地的原因，场地小不够开放，导致效果不好。基本都在转圈，不是按线行驶。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-7836cd0a08d75cab.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="赛道设计图" title="">                </div>                <div class="image-caption">赛道设计图</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-03a09800fe469249.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="场地图" title="">                </div>                <div class="image-caption">场地图</div>            </figure><h1>训练过程</h1><p>很难操作，加上WIFI延迟波动，命令不能及时调整，导致一开始基本无法获得正确的数据。后来用网线直接连接勉强解决，（这个机器学习真费人力）<br>近一万张图片，在没有GPU加速的电脑上训练很慢，用了一个多小时。而在GPU的电脑上用十多分钟就解决了。</p><h1>最终效果</h1><ol><li>油门没有输出，找不出原因，只有角度的输出。最后调成只有角度，手动控制油门。</li><li>在转弯的地方一直在转圈，不会左转出弯，应该是场地左边黑色的边界给识别进去了，加大了权重，到左转时不足？这里我还有视频，但是好像上传有点麻烦，等我处理后再上传。</li><li>训练用的一个方向，但是测试另一个方向时则完全没有效果，估计也是上一个原因吧。</li><li>树莓派只能利用CPU来计算，测试的时候CPU占用有75%，就是3个核已经占满了，性能不是很好。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;考完试，终于有时间把这个学期初的坑填上了。还有几位朋友专门关注了我想知道最新的进展，很抱歉啊很久没有消息，也没有什么大进展，下面就说说目前做了的事情和效果。&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div cla
      
    
    </summary>
    
    
      <category term="树莓派" scheme="https://whllhw.xyz/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>树莓派构建wheels下载</title>
    <link href="https://whllhw.xyz/posts/2018/12/28/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%9E%84%E5%BB%BAwheels%E4%B8%8B%E8%BD%BD/"/>
    <id>https://whllhw.xyz/posts/2018/12/28/树莓派构建wheels下载/</id>
    <published>2018-12-28T15:25:57.000Z</published>
    <updated>2019-04-14T13:05:22.047Z</updated>
    
    <content type="html"><![CDATA[<p>树莓派是arm平台，用pip安装时，默认从源码构建，编译耗时过长，甚至编译失败<br><a href="http://www.piwheels.org" target="_blank" rel="noopener">www.piwheels.org</a> 提供树莓派预编译二进制包<br>操作步骤：</p><ol><li>在 /etc/pip.conf 添加如下内容，启用源</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">extra-index-url=https://www.piwheels.org/simple</span><br></pre></td></tr></table></figure><p>不过由于镜像在国外，国内有时访问过慢，下载失败。<br>解决：<br>上网站去手动下载 whl 文件到电脑后传给树莓派后执行 pip install $file_name.whl 安装。注意：文件名不能更改，否则会提示：<br>is not a supported wheel on this platform.<br>例如，浏览器给我加的括号1：<br>tensorflow-1.11.0-cp35-none-linux_armv7l (1).whl is not a supported wheel on this platform.</p><p>PS:<br>安装tensorflow时可先安装h5py的whl文件，不然又要编译h5py</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;树莓派是arm平台，用pip安装时，默认从源码构建，编译耗时过长，甚至编译失败&lt;br&gt;
&lt;a href=&quot;http://www.piwheels.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;www.piwheels.org&lt;/a&gt; 提供树莓派预编
      
    
    </summary>
    
    
      <category term="python, 树莓派" scheme="https://whllhw.xyz/tags/python-%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>看书及写书摘：写下来才是自己的</title>
    <link href="https://whllhw.xyz/posts/2018/12/15/%E7%9C%8B%E4%B9%A6%E5%8F%8A%E5%86%99%E4%B9%A6%E6%91%98%EF%BC%9A%E5%86%99%E4%B8%8B%E6%9D%A5%E6%89%8D%E6%98%AF%E8%87%AA%E5%B7%B1%E7%9A%84/"/>
    <id>https://whllhw.xyz/posts/2018/12/15/看书及写书摘：写下来才是自己的/</id>
    <published>2018-12-15T07:45:10.000Z</published>
    <updated>2019-04-14T13:05:22.037Z</updated>
    
    <content type="html"><![CDATA[<p>开学的时候受公众号（stormzhang）影响在当当买了几本书，大佬推荐的一些理财书（《富爸爸穷爸爸》、《小狗钱钱》），还有一些运营的书（《启示录》、《增长黑客》）。和好友一起凑单买了几本，很快囫囵吞枣把一页页书吃掉，书上知识、理念很开眼界，但是现在博主已经全都忘记书上说过什么了，可能得再次翻开书才能找回看书时熟悉的感觉。今天写这篇水文，就当总结阅读来的感悟，还有不足之处吧。<br>以前的时候基本没怎么看书，天真地利用搜索引擎，以为有了搜索引擎就什么都可以找到。直到发现我遇到的问题开始在网上找不到了，不再是简单的是什么，怎么解决某个错误怎么处理，如何入门XX。可能这就是天花板了，简单的知识网上全都是，但是经过处理消化的知识不会遍地都是。很多“隐藏”内容都在书上写着、在文档里躺着，等着去阅读、去发掘。而且只利用网络上的只言片语、某些知道问答类型的网站，不会建立知识的网络，只是内容的搬运工，没有思考便得到答案，用进废退，早晚变笨蛋。一开始博主就是这么想的，有什么不会直接网上搜，肯定都有的，直接复制下来。经过一年两年发现自己的知识只是停留在片面，别人一说起某个名词，脑子里只知道好像在哪个网上博客里看到过，并不清楚到底是什么。网络真是把双刃剑，多少人没有利用好它，白白浪费自己的生命（当然这也让一些营销号、公司赚到了钱，甚至上了市），本来用来交换信息的好方式，不过这也不能怪工具，还是得从自己出发，发挥主观能性<br>这学年课很水，也不喜欢上课了，上课就打开手机看书或是带本书过去看，如今一学期快考试了，却还啥都不会。</p><ol><li>提醒自己该干嘛<br>比如一开始小狗钱钱里钱钱让（女主什么来着，网上找找）吉娅开始每天写成功笔记，并让读者也天天写自己成功的事情，博主也坚持做了一周时间，都后来就没有再写过了，达不到持久效果，果然人还是有惰性的。</li><li>看了很多书，还是涨点知识<br>今年在微信读书上看了不少的书，有各大厂的传记：</li></ol><ul><li>《顺势而为：雷军传》雷军从武汉电子一条街到做 WPS 、做投资、到现在做价格公道感动人心的小米</li><li>《腾讯传》一开始进这个App直接送的书籍（鹅厂也是够暗示了），不记得具体内容了，就是记录鹅厂的崛起故事，从寻呼机、OICQ，QQ、移动梦网到张小龙的微信<br>一些理财知识书籍，成功学？？：</li><li>《小狗钱钱》以小说情节中穿插金钱、投资的概念和做法</li><li>《富爸爸穷爸爸》直接上干货，对比自己的爸爸和好友的爸爸做法，引出穷人思维和富人思维。</li><li>《牛奶可乐经济学》揭示日常生活的经济学。<br>一些优点技术干货的书籍：</li><li>《蚂蚁金服：科技金融独角兽的崛起》这本还记得比较清楚，一本讲述支付宝是如何从淘宝分出来一个独立的系统，如何称霸的，面对各银行的不理睬，只有一家工商银行杭州支行给了支付接口，支付宝才得以用所谓快捷支付撸走用户银行卡里的钱。到现在做余额宝、基金、保险等互联网金融业务。还是挺振奋人心的，一开始的内部不支持，外部没银行支持，然后这个项目直接完蛋（怎么和阿里云一样了，可能记混了）</li><li>《淘宝技术这十年》外行人看热闹，内行人看门道。面对淘宝这样指数增长的业务流量，说了很多技术方面的事情，从买php源码，从Oracle，到自己开发数据库Oceanbase，开源项目能用到了都针对自己的业务量改过，并发行了自己的分支版本。其中几位码神多隆这样的人才，用神样的操作硬是让某些技术达到传说级别。</li><li>《网络是怎么连接的》《程序是怎样跑起来的》日本人写的一个系列书籍某某是怎样的，比较浅显，不像一些专业书籍那么难理解</li><li>《图解HTTP》也是一些入门书籍</li><li>《白帽子讲Web安全》先讲解了一些安全的基本概念，人是不安全因素。还有XSS、CSRF、SQL注入一些Web漏洞的防护。</li><li>《操作系统之哲学原理》强行哲学，有道理，看完也写不了操作系统<br>还有一些是程序员修养、职业生涯这类的，会写书的程序员谈心路历程之类的。没有做记录，已经不知道说了什么了。</li><li>《MacTalk》</li><li>《程序员的自我修养》</li></ul><p>本来是要摘录《软件随想录》里面的内容，但是写着就变成了这个读书总结了？哈哈哈。进入正题：<br>程序员部落酋长乔尔在给计算机系的学生的建议中有下面几点，本人觉得相见恨晚，没有早点在图书馆发现此书：</p><blockquote><p>给计算机系学生的建议</p><ul><li>毕业前练好写作</li><li>毕业前学好C语言</li><li>毕业前学好微观经济学</li><li>因为枯燥就不选修非计算机专业的课程</li><li>选修有大量编码实践的课程</li><li>担心所有的工作都被印度人抢走</li><li>找一份好的暑期实习工作</li><li>寻求专业人士的帮助，培养你的自信心</li></ul></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-d9889f7784b54551.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>虽然书籍写的是十年前的博客摘录，博客上面提到的很多公司没听过，上面的Windows还停留在XP时代，巨硬开发Office，IE，制定一些魔鬼标准，Joel 还谈论他创建的软件，宣传一些开发理念，给开发人员最好的工作环境。现今博客还在更新 <a href="https://www.joelonsoftware.com/" target="_blank" rel="noopener">https://www.joelonsoftware.com/</a><br>就先到这里，写的文字没有逻辑性，还是得多写，不能埋头苦干，别人都不知道你在干什么。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;开学的时候受公众号（stormzhang）影响在当当买了几本书，大佬推荐的一些理财书（《富爸爸穷爸爸》、《小狗钱钱》），还有一些运营的书（《启示录》、《增长黑客》）。和好友一起凑单买了几本，很快囫囵吞枣把一页页书吃掉，书上知识、理念很开眼界，但是现在博主已经全都忘记书上说过
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spring Boot 中流操作使用</title>
    <link href="https://whllhw.xyz/posts/2018/11/21/Spring%20Boot%20%E4%B8%AD%E6%B5%81%E6%93%8D%E4%BD%9C%E4%BD%BF%E7%94%A8/"/>
    <id>https://whllhw.xyz/posts/2018/11/21/Spring Boot 中流操作使用/</id>
    <published>2018-11-21T07:50:33.000Z</published>
    <updated>2019-04-14T13:05:22.026Z</updated>
    
    <content type="html"><![CDATA[<p>Java 8里面的流对象真好用，函数式编程让编码不一样，并且还能并发执行。这里给出一个业务中实际遇到的数据查询映射成一个奇特的Map映射</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  table1: [</span><br><span class="line">    &#123;</span><br><span class="line">      name1: &quot;&quot;,</span><br><span class="line">      name2: &quot;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name1: &quot;&quot;,</span><br><span class="line">      name2: &quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  table2: [</span><br><span class="line">    &#123;</span><br><span class="line">      name3: &quot;1&quot;,</span><br><span class="line">      name4: &quot;2&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name3: &quot;3&quot;,</span><br><span class="line">      name4: &quot;4&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果使用普通的操作分别查询出table内的数据行得到<code>List&lt;table1Entity&gt; lists</code> 然后<code>Map.put(&quot;table1&quot;,lists)</code>就完成了，但是这对于表多的话重复代码就变多了，不符合代码重用的思想。这里给出一个解决方法：</p><p>使用 Java8 的stream API可以较为高效的并发操作，不过理解起来有点难度，（调试也需要一点技巧？）</p><p>首先新建一个key的列表<code>List&lt;String&gt; names</code>， 由其生成一个stream放入查询接口进行查询，得到另一个流，使用一个map进行映射出Javabean，利用filter删除为空的结果，最后Collectors.toList() 收集流。此时得到的是table1、table2的键值对数组（<code>[{&quot;name1&quot;:&quot;&quot;,&quot;name2&quot;:&quot;&quot;}]</code>)。下面给他们按类别扔进对应的Key（由于没有统一基类故使用反射API调用其类型函数，返回类别），<code>Collectors.toMap(s-&gt;{s.get(0).getClass().getMethod(&quot;getItemType&quot;).invoke(s)},s-&gt;s)</code>。附一张图参考，可能还需要进一步优化，不过肯定比线性查询出来后一行一行来的快（见灰色注释掉的代码）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-99779f446545dd7d.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="流操作消除重复代码" title="">                </div>                <div class="image-caption">流操作消除重复代码</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java 8里面的流对象真好用，函数式编程让编码不一样，并且还能并发执行。这里给出一个业务中实际遇到的数据查询映射成一个奇特的Map映射&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
    
      <category term="spring boot, java" scheme="https://whllhw.xyz/tags/spring-boot-java/"/>
    
  </entry>
  
  <entry>
    <title>一个大创项目中期检查说几句</title>
    <link href="https://whllhw.xyz/posts/2018/10/19/%E4%B8%80%E4%B8%AA%E5%A4%A7%E5%88%9B%E9%A1%B9%E7%9B%AE%E4%B8%AD%E6%9C%9F%E6%A3%80%E6%9F%A5%E8%AF%B4%E5%87%A0%E5%8F%A5/"/>
    <id>https://whllhw.xyz/posts/2018/10/19/一个大创项目中期检查说几句/</id>
    <published>2018-10-19T09:15:25.000Z</published>
    <updated>2019-04-14T13:05:22.012Z</updated>
    
    <content type="html"><![CDATA[<h1>0</h1><p>暑假项目组一起开发了一个 Spring Boot 项目，内容很多很复杂，代码有好看的也有不好看的，从设计到开发，谁也没有经验（辅导员敢这么相信我们，很感动😂）。没有经过系统测试，草草便上线了，效果还意外不错？！😂</p><h1>1</h1><p>自己是用户才能设计出好产品，知道痛点是什么，而不是设计某某系统，写文档介绍说很牛叉，真正用起来就是另一回事。</p><ul><li>可能开发人员不清楚真正核心的需求是什么，没有考虑用户体验，直接上手堆砌代码，以代码行数取胜。</li><li>过度需求，加上无用的功能，分散用户注意力。不论怎样，加上再说，提需求的人自己搞不清楚到底要什么。</li><li>线下流程过于繁重，想要在线上重现也麻烦。</li></ul><h1>2</h1><p>现在处于摸索阶段，期望不要太高，毕竟不是专业开发。不过能开发出数百人同时使用的网站也感觉很好了，主要是现在工具好用，能力没多高（但是人就是会用工具提升自己的生产力，没有工具就回到原始时代）</p><h1>3</h1><ul><li>除了第二天凌晨被刷网站目录，好像也没遇到什么安全问题。（可能只是没发现）互联网这么开放，安全问题首要考虑啊。</li><li>一个展示的地方设计得不对，用户看不到图片，紧急新写了一个接口展示数据。（设计和开发都有责任）</li><li>辅导员过期后，要求重新审核数据。看了很久代码，才知道改一改数据库就完事了。（可以说是文档不完善）</li></ul><h1>4</h1><p>没收到多少反馈，可能是发了操作指南吧😂（跟学校系统一样需要指南）这也反应出不足吧，不能一眼就知道如何操作？</p><h1>5</h1><p>没有搜集用户数据（也没啥可搜集的），没有搜集业务接口访问量（可能访问量上来才有用吧）</p><hr><h1>附：统计数据</h1><p>目前已上线的综测系统，顺利完成了今年16级信息院综测相关业务。包括学生填报加分项并上传证明图片、班长进行审核该班级的证明、辅导员最终确认有效加分项。下文统计数据时间段为：9月11日 9:00 到 9月16日 0:00</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-4554bb1723d93ae4.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="流量数据" title="">                </div>                <div class="image-caption">流量数据</div>            </figure><ul><li>前端页面资源使用CDN进行分发，使用回源策略更新文件，减少业务服务器的压力。综测期间使用了8.9GB流量，同时在线达到300 ，资源命中率达90%。实际到达服务器的流量不到500MB，网页加载速度提升，有效提升了用户体验。由于使用的打包工具可计算文件的MD5指纹，在我们更新代码时生成唯一的文件名，避免用户从CDN缓存中获取到旧版本的代码文件。首页入口文件不进行缓存，保证每次访问页面总是询问源服务器是否为最新版本的首页。其他文件缓存30天，代码没有更新时能够快速从本地客户端缓存中获取，同时也减小对CDN的压力和流量。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-c92f01609476421b.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="图片CDN使用流量" title="">                </div>                <div class="image-caption">图片CDN使用流量</div>            </figure><ul><li>证明图片使用对象存储和CDN分发，有效保障了此次审核证明业务。综测期间共上传了 2.9GB 的图片资源，图片访问总流量75.26GB，日均流量12.54GB，峰值带宽21.10Mbps，该时间节点为学生停止申报前。图片资源访问次数总量90,611次，日均15,102次。图片资源的存储以及分发，极其占用磁盘空间、网络带宽。若放在业务服务器上必定对其他基础业务有影响，降低了并发数，用户一多就不能正常服务，出现一到高峰就宕机的情况，但是本项目使用使用对象存储服务，CDN进行资源分发。业务服务器在接受到客户端图片资源的请求时，只需要返回一个带授权凭证的URL，客户端便可以向CDN请求数据，流量转移到CDN而不会直接到业务服务器，减少其对其他基础业务的影响。<br>同学们对该系统反应良好，反应其网络响应速度比一般网站都要快速。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;0&lt;/h1&gt;
&lt;p&gt;暑假项目组一起开发了一个 Spring Boot 项目，内容很多很复杂，代码有好看的也有不好看的，从设计到开发，谁也没有经验（辅导员敢这么相信我们，很感动😂）。没有经过系统测试，草草便上线了，效果还意外不错？！😂&lt;/p&gt;
&lt;h1&gt;1&lt;/h1&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="spring boot, java" scheme="https://whllhw.xyz/tags/spring-boot-java/"/>
    
  </entry>
  
  <entry>
    <title>实现一个自己的无人车：Donkey Car 一个小型汽车开源DIY自动驾驶平台</title>
    <link href="https://whllhw.xyz/posts/2018/10/01/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E6%97%A0%E4%BA%BA%E8%BD%A6%EF%BC%9ADonkey%20Car%20%E4%B8%80%E4%B8%AA%E5%B0%8F%E5%9E%8B%E6%B1%BD%E8%BD%A6%E5%BC%80%E6%BA%90DIY%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%B9%B3%E5%8F%B0/"/>
    <id>https://whllhw.xyz/posts/2018/10/01/实现一个自己的无人车：Donkey Car 一个小型汽车开源DIY自动驾驶平台/</id>
    <published>2018-10-01T15:27:40.000Z</published>
    <updated>2019-04-14T13:05:22.001Z</updated>
    
    <content type="html"><![CDATA[<h1>self driving car</h1><blockquote><p>An opensource DIY self driving platform for small scale cars.<br>RC CAR     Raspberry Pi   Python (tornado, keras, tensorflow, opencv, …)<br><a href="https://github.com/wroscoe/donkey" target="_blank" rel="noopener">https://github.com/wroscoe/donkey</a></p></blockquote><h2 id="donkeycar-a-python-self-driving-library">donkeycar: a python self driving library</h2><blockquote><p>Donkeycar is minimalist and modular self driving library for Python. It is developed for hobbyists and students with a focus on allowing fast experimentation and easy community contributions.<br><a href="http://www.donkeycar.com/" target="_blank" rel="noopener">http://www.donkeycar.com/</a></p></blockquote><ul><li>基于python的极简、模块化的自动驾驶库</li><li>开源社区驱动项目</li></ul><h1>设计理念</h1><ul><li>快速</li><li>模块化</li><li>可扩展</li><li>Keep It Simple, Stupid (KISS)</li></ul><blockquote><p>把复杂的事情变简单，这是一件复杂的事情</p></blockquote><hr><h1>使用的技术</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-fbb3d9300bc8e034.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="Keras" title="">                </div>                <div class="image-caption">Keras</div>            </figure><h2 id="keras-：基于-python-的深度学习库">Keras ：基于 Python 的深度学习库</h2><p><a href="https://github.com/keras-team/keras" target="_blank" rel="noopener">https://github.com/keras-team/keras</a></p><ul><li>Deep Learning for humans</li><li>可以以TensorFlow, CNTK, 或者Theano 作为后端运行</li><li>支持快速实验，最小时延<ul><li>允许简单而快速的原型设计（由于用户友好，高度模块化，可扩展性）</li><li>支持卷积神经网络和循环神经网络，以及两者的组合。</li><li>在 CPU 和 GPU 上无缝运行。</li></ul></li><li>开源</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-cbe7c807e33baa5a.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="Tornado" title="">                </div>                <div class="image-caption">Tornado</div>            </figure><h2 id="tornado">Tornado</h2><p><a href="https://github.com/tornadoweb/tornado" target="_blank" rel="noopener">https://github.com/tornadoweb/tornado</a></p><ul><li>高性能 web 框架和异步网络库（非阻塞网络 I/O）</li><li>开源</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-8dbfc84bb25a5571.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="TensorFlow" title="">                </div>                <div class="image-caption">TensorFlow</div>            </figure><h2 id="tensorflow：深度学习工具">Tensorflow：深度学习工具</h2><p><a href="https://github.com/tensorflow/tensorflow" target="_blank" rel="noopener">https://github.com/tensorflow/tensorflow</a></p><ul><li>Tensor 张量即N维数组，Flow 流即基于数据流图的计算，合起来即张量从图一端到另一端</li><li>Google 开源</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-aa483965b7eef4d0.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="OpenCV" title="">                </div>                <div class="image-caption">OpenCV</div>            </figure><h2 id="opencv：机器视觉库">Opencv：机器视觉库</h2><p><a href="https://github.com/opencv/opencv" target="_blank" rel="noopener">https://github.com/opencv/opencv</a></p><ul><li>实时图像处理、计算机视觉以及模式识别</li><li>Intel 开源</li></ul><hr><h1>硬件 DIY</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-eeec2fe5cec50593.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="Raspberry Pi 俯视图" title="">                </div>                <div class="image-caption">Raspberry Pi 俯视图</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-c4c316ce3b5da690.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="Raspberry Pi 外设连接图" title="">                </div>                <div class="image-caption">Raspberry Pi 外设连接图</div>            </figure><h2 id="树莓派">树莓派</h2><blockquote><p>The Raspberry Pi Foundation is a UK-based charity that works to put the power of digital making into the hands of people all over the world, so they are capable of understanding and shaping our increasingly digital world, able to solve the problems that matter to them, and equipped for the jobs of the future.</p></blockquote><ul><li>为学生计算机编程教育设计的卡片式电脑</li><li>开源硬件、软件</li><li>ARM Debian8.0 系统，定制硬件驱动与软件程序</li></ul><h2 id="普通遥控车改装">普通遥控车改装</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-7956d228b60ac326.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="大脚车示例" title="">                </div>                <div class="image-caption">大脚车示例</div>            </figure><ol><li>电机速度控制器<ul><li>PWM控制</li></ul></li><li>转向伺服系统</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-f2ceb349e5c87806.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="9g 舵机" title="">                </div>                <div class="image-caption">9g 舵机</div>            </figure><pre><code>  - PWM控制</code></pre><ol start="3"><li>有刷电机驱动</li><li>传感器</li></ol> <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-dce242dcf9382bb7.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="广角相机" title="">                </div>                <div class="image-caption">广角相机</div>            </figure><pre><code>- 广角相机</code></pre><h2 id="最终效果图">最终效果图</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-585943f27acaec24.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="donkey car" title="">                </div>                <div class="image-caption">donkey car</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;self driving car&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;An opensource DIY self driving platform for small scale cars.&lt;br&gt;
RC CAR     Raspberry Pi   Python
      
    
    </summary>
    
    
      <category term="树莓派" scheme="https://whllhw.xyz/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>连接到极品飞车世界 CN 服务器</title>
    <link href="https://whllhw.xyz/posts/2018/09/16/%E8%BF%9E%E6%8E%A5%E5%88%B0%E6%9E%81%E5%93%81%E9%A3%9E%E8%BD%A6%E4%B8%96%E7%95%8C%20CN%20%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://whllhw.xyz/posts/2018/09/16/连接到极品飞车世界 CN 服务器/</id>
    <published>2018-09-16T12:57:59.000Z</published>
    <updated>2019-04-14T13:05:21.987Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇文章主要讲如何连接服务器。关于如何自己搭建服务器看我的博客<a href="">这篇文章</a>或者 <a href="https://www.jianshu.com/p/c0c64200b45e" target="_blank" rel="noopener">简书</a></p></blockquote><hr><p>提供一个我最近搭建的服务器，连接方法在下面。<br><strong>地址：<a href="http://q.whllhw.xyz:1337" target="_blank" rel="noopener">http://q.whllhw.xyz:1337</a></strong></p><hr><h1>前言</h1><p>看到了敖厂长出的视频，居然还有这样的游戏能开私服。目前网上能搜到的就这篇文章<a href="https://www.bilibili.com/read/cv44595/" target="_blank" rel="noopener">【极品飞车世界】私服连接教程</a><br>游戏画面当然不能跟现在的游戏比较，硬核玩家才不会在意这些。<a href="https://www.bilibili.com/video/av25753282" target="_blank" rel="noopener">【敖厂长】死掉的极品飞车游戏</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-761f611236891f57.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="当然是去卡收费站的bug啦" title="">                </div>                <div class="image-caption">当然是去卡收费站的bug啦</div>            </figure><p>不过连接国外的服务器有问题，ping 值 200 ，还登录不了。最近 zesty 开的CN 服务器也莫名其妙不见了，可能是关掉了吧。😂</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-9c729948532d0050.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="SoapboxRaceWorld.world也打不开" title="">                </div>                <div class="image-caption">SoapboxRaceWorld.world也打不开</div>            </figure><p>我于是就花了一个星期去找资料（其中用到 docker 也算是学习的过程）现在基本搭建好了，而且还对 soapbox world 的启动器进行了适配（强行适配）<br>在搭建的文章中我写了如何搭建服务器，由于缺少支持，soapbox world 官方文档简陋，缺少数据表，无法用其提供的软件进行搭建。我找到了 <a href="https://github.com/michelinus" target="_blank" rel="noopener">michelinus</a>/<strong><a href="https://github.com/michelinus/nfsw-server" target="_blank" rel="noopener">nfsw-server</a></strong> 使用 maven 进行构建，打包出一个 jar 包，部署简单多了。</p><h1>正文</h1><ol><li>去到上面提到的 <a href="https://www.bilibili.com/read/cv44595/" target="_blank" rel="noopener">bilibili 网页</a>，打开网盘下载</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-9a4358b854bc4781.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="打开网盘" title="">                </div>                <div class="image-caption">打开网盘</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-be6fe23c02fb72dd.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="选中这两项，一个是游戏本体，一个是启动器。下载即可" title="">                </div>                <div class="image-caption">选中这两项，一个是游戏本体，一个是启动器。下载即可</div>            </figure><ol start="2"><li>下载完了，解压出来，分别我这里解压到了两个文件夹</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-d009079df1ea9bec.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol start="3"><li>打开启动器（可能会提示更新，先更新即可）稍等界面出来，这时应该会自动开始下载游戏文件没关系，右上角有设置按钮点进去，选择游戏文件路径（有 nfsw.exe 的文件夹）其他的选项跟我一样即可，点击 SAVE 会提示重启启动器。</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-1f024db83338d5f5.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="选择刚才解压的文件夹，注意要有 nfsw.exe 的文件夹" title="">                </div>                <div class="image-caption">选择刚才解压的文件夹，注意要有 nfsw.exe 的文件夹</div>            </figure><ol start="4"><li>重启完了之后，如果游戏路径选择正确就出现 DOWNLOAD COMPLETED.否则还会自动下载游戏文件</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-4d58061050fc59a2.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="成功后的就不会再下载文件了" title="">                </div>                <div class="image-caption">成功后的就不会再下载文件了</div>            </figure><p>5.添加服务器（点右上角的加号）输入名称（随意输入），输入服务器地址：<a href="http://q.whllhw.xyz:1337" target="_blank" rel="noopener">http://q.whllhw.xyz:1337</a> 选择OK，提示已经添加成功</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-28b52f49fa9823eb.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>6.添加完了之后要自行重启启动器，然后在服务器列表就能看到了，选中刚才添加的一项</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-ba868a04d7ec206c.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol start="7"><li>最后，点击绿色按钮注册一个账号，注册完了就能登录了 PLAY NOW ！</li><li>enjoy！</li></ol><hr><p>Ps：若出现无法添加服务器，检查输入是否有问题（建议服务器地址从上面复制进去），也可能服务器正在维护，可以在下面留言询问。其他任何问题也可以给我留言。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-caca1e59a342e925.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="添加服务器时出现Please check better..." title="">                </div>                <div class="image-caption">添加服务器时出现Please check better...</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本篇文章主要讲如何连接服务器。关于如何自己搭建服务器看我的博客&lt;a href=&quot;&quot;&gt;这篇文章&lt;/a&gt;或者 &lt;a href=&quot;https://www.jianshu.com/p/c0c64200b45e&quot; target=&quot;_blank&quot; rel=&quot;n
      
    
    </summary>
    
    
      <category term="游戏服务器" scheme="https://whllhw.xyz/tags/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>极品飞车世界 NFS World 服务器搭建教程</title>
    <link href="https://whllhw.xyz/posts/2018/09/16/%E6%9E%81%E5%93%81%E9%A3%9E%E8%BD%A6%E4%B8%96%E7%95%8C%20NFS%20World%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
    <id>https://whllhw.xyz/posts/2018/09/16/极品飞车世界 NFS World 服务器搭建教程/</id>
    <published>2018-09-16T11:36:14.000Z</published>
    <updated>2019-04-14T13:05:21.975Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇文章主要讲搭建过程，以及出现问题的解决方法。难度较高，我已经搭建好了服务器供玩耍，如何连接服务器看<a href="">这篇文章</a>或者 <a href="https://www.jianshu.com/p/23bcb1dcbe26" target="_blank" rel="noopener">简书</a></p></blockquote><h1>不推荐的方法</h1><p>我先找到 github <a href="https://github.com/SoapboxRaceWorld/soapbox-race-core" target="_blank" rel="noopener">SoapboxRaceWorld</a>上面的开源服务器，尝试了很久，最后搭建好了之后发现游戏中购车的界面进不去，在后台数据库发现少数据，但是我已经全部导入了的😂</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-481f81f16c4de4f1.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="缺少表" title="">                </div>                <div class="image-caption">缺少表</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-af34e1c7d352abb5.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="在代码里面搜索，能在代码里找到，给的SQL文件里面没有。" title="">                </div>                <div class="image-caption">在代码里面搜索，能在代码里找到，给的SQL文件里面没有。</div>            </figure><p>既然已经不推荐用这种方法了，可以跳过这里。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-a65815bd7e0c07d6.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="已经一年没更新了" title="">                </div>                <div class="image-caption">已经一年没更新了</div>            </figure><p>打包出来的是 war ，需要 wildfly 才能部署，需要做的事情如下：</p><ol><li>下载 releases 打包好的 war，以及 wiki 里提供的 <a href="https://github.com/SoapboxRaceWorld/soapbox-race-core/wiki/Wildfly" target="_blank" rel="noopener">wildfly</a> （google drive 要梯子）</li><li>放入 war 到 wildfly 目录下的 standalone/deployments</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-27c7690cb692e51f.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="war 包放入这个文件夹" title="">                </div>                <div class="image-caption">war 包放入这个文件夹</div>            </figure><ol start="3"><li>配置 openfire 服务 （配置文件 wildfly/standalone/configuration/standalone.xml）<br>配置 xmppIp 为公网地址（必须检查）<br>Udp freeroam、race 都是未完成的功能（私服官方到现在都没搞定😂我也不知道是什么功能）<br>配置 openfire restful api 地址<br>配置 openfire token</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-2dd9d478730bda3d.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="standalone.xml 中系统属性示例" title="">                </div>                <div class="image-caption">standalone.xml 中系统属性示例</div>            </figure><p>也可以登录wildfly 后台修改http://localhost:9990/console/App.html#profile/properties（需要创建账户，运行 <a href="http://add-user.sh" target="_blank" rel="noopener">add-user.sh</a> 按提示即可）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-417366ed002f7a25.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="系统属性配置" title="">                </div>                <div class="image-caption">系统属性配置</div>            </figure><ol start="4"><li>配置数据库，同样可以编辑 xml 也可以登录后台数据源配置</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-99b3df61bcaa0f57.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="默认用户密码 soapbox soapbox" title="">                </div>                <div class="image-caption">默认用户密码 soapbox soapbox</div>            </figure><p>5.（可选）配置绑定的后台管理地址</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-43948106498e3815.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="默认绑定127.0.0.1，docker镜像我改成0.0.0.0了" title="">                </div>                <div class="image-caption">默认绑定127.0.0.1，docker镜像我改成0.0.0.0了</div>            </figure><ol start="6"><li>可在后台重启服务</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-e71f34fa506ec8af.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="重新加载服务" title="">                </div>                <div class="image-caption">重新加载服务</div>            </figure><hr><h1>正文</h1><p>wiki 给出需要用到服务 openfire 、mysql 、wildfly（后面我找到了 nfsw-server.jar替换掉）都需要用到数据库，所以先从数据库开始吧。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-2a7052fc6c9f35db.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="来源 https://github.com/SoapboxRaceWorld/soapbox-race-core/wiki/How-does-it-work?" title="">                </div>                <div class="image-caption">来源 https://github.com/SoapboxRaceWorld/soapbox-race-core/wiki/How-does-it-work?</div>            </figure><h2 id="搭建前提">搭建前提</h2><p>有 1G 以上的内存，公网IP（如果只是要本地，直接下一个模拟器就好了，不用这么麻烦。），最好 Linux 主机，windows 没试过，不过应该也行。</p><h2 id="1-mysql-数据库">1. MySQL 数据库</h2><ol><li>导入<a href="https://github.com/whllhw/nfsw-server/blob/master/db/OPENFIRE.sql" target="_blank" rel="noopener">OPENFIRE.sql</a>，<a href="https://github.com/whllhw/nfsw-server/blob/master/db/soapbox.sql" target="_blank" rel="noopener">soapbox.sql</a>（修改后从数据库导出的，原来的 db.sql 有点问题，soapbox 数据库大小写没对上😂）<br>默认openfire用户名：openfire 密码 openfire<br>默认soapbox用户名：soapbox 密码soapbox<br>PS：不用来试我数据库了，没开放3306端口，我是用SSH通道用密钥连接的。</li><li>保持数据运行就好了</li></ol><h2 id="2-openfire-配置">2.openfire 配置</h2><p>如 wiki 写的一样<a href="https://github.com/SoapboxRaceWorld/soapbox-race-core/wiki/OpenFire" target="_blank" rel="noopener">OpenFire</a>从 google drive下载。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-19953b811b7fd089.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="1.配置数据库连接" title="">                </div>                <div class="image-caption">1.配置数据库连接</div>            </figure><p>登录后台，admin 密码 admin<br>访问 localhost:9090/plugins/restapi/rest-api.jsp 启用 restful api 把 openfire token 保存下来配置nfsw-server需要用到<br>登录后台 localhost:9090/server-properties.jsp<br>Xmpp.domain 改为与后面的nfsw-server.cfg中xmppIp一样的地址</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-cf73df842d711753.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="2.配置Xmpp.domain 一般为内网 ip （使用外网ip的话云服务一般都要去配置安全组，openfire 只要能访问就行了）" title="">                </div>                <div class="image-caption">2.配置Xmpp.domain 一般为内网 ip （使用外网ip的话云服务一般都要去配置安全组，openfire 只要能访问就行了）</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-52e422b7c147aca1.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="配置Xmpp.domain错误导致连接的时候会检验 Host 字段，不相同则无法建立连接，无法使用聊天服务" title="">                </div>                <div class="image-caption">配置Xmpp.domain错误导致连接的时候会检验 Host 字段，不相同则无法建立连接，无法使用聊天服务</div>            </figure><p>运行 <code>openfire/bin/openfire start</code>让其在后台运行即可。<br>日志文件在 <code>openfire/logs/</code>目录下，有问题时可以使用<code>tailf openfire/logs/all.log</code>持续查看输出，方便找配置错误，当没有报数据库连不上，没有打印出一些堆栈时就可配置nfsw-server了，否则检查配置是否有误。</p><h2 id="3-nfsw-server-配置">3.nfsw-server 配置</h2><p><a href="https://github.com/whllhw/nfsw-server/releases" target="_blank" rel="noopener">在github下载nfsw-server.jar、nfsw-server.cfg</a>也可以自己编译，下载 jdk、maven执行 <code>mvn clean compile assembly:single</code></p><ol start="0"><li>配置数据库连接（src/main/resources/META-INF/persistence.xml）使用打包的话可以先替换掉压缩包里的 xml</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-ebd0debfd07f5f2a.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="如果不改用户名密码的话配置好url即可，或者添加 host 解析nfsw-server 到ip地址127.0.0.1 也可以" title="">                </div>                <div class="image-caption">如果不改用户名密码的话配置好url即可，或者添加 host 解析nfsw-server 到ip地址127.0.0.1 也可以</div>            </figure><ol><li>在nfsw-server.cfg中配置xmppIp（在openfire配置的xmpp.domain 一定要一样，否则报错 <code>Unable to authenticate: Fail to create new session.</code>）</li><li>openfireToken（在openfire配置的openfireToken）</li><li>httpPort是游戏开放端口，我用的是1337（外网开放1337端口）</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-476964e1a7c54e06.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="其他没提到的就和上图一样就好了" title="">                </div>                <div class="image-caption">其他没提到的就和上图一样就好了</div>            </figure><ol start="4"><li>nfsw-server.cfg，nfsw-server.jar 放在同一目录下执行<code>java -jar nfsw-server.jar</code><br>注意看输出，先连接 openfire restful api 返回 201说明 openfire 连接成功</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/10215367-73ba3c1133550a6b.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="201才表示连接成功" title="">                </div>                <div class="image-caption">201才表示连接成功</div>            </figure><p>然后连接数据库，当没有报数据库连不上，没有打印出一些堆栈时就可应该可以了，否则检查配置是否有误。</p><h1>enjoy！</h1><p>nfsw 服务搭建已经完成，在开头的文章下载 nfsw 以及启动器就可以登录了！等会再写一篇客户端登录的教程<br>PS：我准备把这个服务做成 docker 镜像，这样部署的时候就不用这么配来配去（自己捣鼓了差不多一个星期才搞定，先是 wildfly 搭建的数据库缺数据，无法购买车辆，后是 openfire 中 xmpp.domain 配置错误，进入游戏就提示与服务器断开连接，其实是跨域的问题，nfsw-server的xmppIp要与其相同。）<br>上面项目都是基本已经停止维护的，使用的 openfire 是4.0.2 的，我fork的老哥<a href="https://github.com/michelinus" target="_blank" rel="noopener">michelinus</a>/**<a href="https://github.com/michelinus/nfsw-server" target="_blank" rel="noopener">nfsw-server</a>**也停止更新一年了。<br>有问题可以在下面留言哦，欢迎一起交流（虽然极大可能零回复）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本篇文章主要讲搭建过程，以及出现问题的解决方法。难度较高，我已经搭建好了服务器供玩耍，如何连接服务器看&lt;a href=&quot;&quot;&gt;这篇文章&lt;/a&gt;或者 &lt;a href=&quot;https://www.jianshu.com/p/23bcb1dcbe26&quot; ta
      
    
    </summary>
    
    
      <category term="java" scheme="https://whllhw.xyz/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio 2017 无法登陆提示脚本错误</title>
    <link href="https://whllhw.xyz/posts/2018/09/10/Visual%20Studio%202017%20%E6%97%A0%E6%B3%95%E7%99%BB%E9%99%86%E6%8F%90%E7%A4%BA%E8%84%9A%E6%9C%AC%E9%94%99%E8%AF%AF/"/>
    <id>https://whllhw.xyz/posts/2018/09/10/Visual Studio 2017 无法登陆提示脚本错误/</id>
    <published>2018-09-10T02:17:26.000Z</published>
    <updated>2019-04-14T13:05:21.961Z</updated>
    
    <content type="html"><![CDATA[<p>打开 VS 发现许可证过期，需要登陆后重新获取，但是登陆时提示：<a href="https://auth.gfx.ms/16.000.27887.2/OldConvergedLogin_PCore.js" target="_blank" rel="noopener">https://auth.gfx.ms/16.000.27887.2/OldConvergedLogin_PCore.js</a> Script error 无法执行脚本。<br>浏览器打开发现脚本没问题。重启多试几次，还是不行，就直接搜这个网址，还真有：<a href="https://www.cnblogs.com/xxyxxb2080/p/9520837.html" target="_blank" rel="noopener">VS2017登陆不了,TFS无法连接成功的问题</a><br>果然，我的 win7 是 ie8，不过都是用 chrome 上网的（巨硬都是用系统自带的东西，也是服了），马上更新<br><a href="https://www.microsoft.com/en-us/download/internet-explorer-11-for-windows-7-details.aspx" target="_blank" rel="noopener">ie 11 更新包</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/ie1.png" alt="下载运行提示缺少必要的更新，弹出网页，下载所有安装即可，再重启电脑安装ie 11" title="">                </div>                <div class="image-caption">下载运行提示缺少必要的更新，弹出网页，下载所有安装即可，再重启电脑安装ie 11</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/ie2.png" alt="安装 ie 11" title="">                </div>                <div class="image-caption">安装 ie 11</div>            </figure><p>更新完了之后，我发现 Office 也能登录了，可以愉快的用 OneNote 了。😄</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;打开 VS 发现许可证过期，需要登陆后重新获取，但是登陆时提示：&lt;a href=&quot;https://auth.gfx.ms/16.000.27887.2/OldConvergedLogin_PCore.js&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ht
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>暑假有感</title>
    <link href="https://whllhw.xyz/posts/2018/09/03/%E6%9A%91%E5%81%87%E6%9C%89%E6%84%9F/"/>
    <id>https://whllhw.xyz/posts/2018/09/03/暑假有感/</id>
    <published>2018-09-02T16:03:06.000Z</published>
    <updated>2019-04-14T13:05:21.951Z</updated>
    
    <content type="html"><![CDATA[<p>以前回家总是没事情做，天天无所事事，每次放假回来都充满内疚感，什么都没有做，高三老师曾说，假期是超越别人的最好时期。那这样说来，我都不知道被超越了多少了。但是这个假期，可以说是有收获的。时间匆匆，近两个月的时间很快就结束了，时间总是过得很快，让人来不及记得发生过的事。这段时间，是很开心的，可以说是令人激动的。认识这么多优秀的同学，还有老司机学长。每次交流总能有新的笑点，分享经验，分享遇到各种的坑。我不善于交际、很少交流、表达困难，在外人眼前很少暴露自己狂热的内心想法。但是在这个团队里却觉得很舒适，不会觉得很压抑，也是很感谢各个同学和学长一起营造的友好氛围。</p><p>第一次见面时候，紧张，慌乱，害怕融入不了这个集体，过了一个暑假到现在却不舍离开。早上一过去，盯了一会屏幕，就该吃午饭了，然后又到了晚上了。很快一个暑假就过去了，仿佛就是昨天。</p><p>很多时候，我觉得我都做的不足，其实我是可以解决得更多的事情，可以分担一下队友的锅，或者是重构一些代码，而不是袖手旁观。学习积累不足，很多东西直接就用起来了。有时间还是要多读文档，了解相关知识，不然到时候用起来就容易 GG。</p><ul><li>顺便就加上 CDN ，对象存储等云服务。直接把静态页面放在了七牛上面，但是资源的刷新在更新代码后看不到效果，即便强制刷新也不能出来（在七牛上刷新也无效）。后面还是用 CDN 回源，把前端资源放在腾讯云服务器上。</li><li>在多人协作方面真是要多学习，比如代码合并问题，还有沟通上存在的问题，效率受影响。真实的项目要做好确实不容易，很多东西缺乏统一，缺乏规范，缺乏测试代码，导致后面问题很多。（只能慢慢修补了）</li><li>代码模块之间的耦合度还是比较高，有的地方直接用 repository ，有的地方调用 service</li><li>数据库的建模也需要一定的规划，统一字段名，数据类型，索引建立，唯一性约束，（外键还是有待商榷）</li><li>缺少 DBA ，测试人员，（现在都是人肉测试，出了问题就直接改）不过毕竟也是小型项目，大家都是边学边做，也没有有经验人员指导，只是在网上翻，在一些书里面翻，缺少实践，也就找不到最佳实践。<br>（其他的待更新）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以前回家总是没事情做，天天无所事事，每次放假回来都充满内疚感，什么都没有做，高三老师曾说，假期是超越别人的最好时期。那这样说来，我都不知道被超越了多少了。但是这个假期，可以说是有收获的。时间匆匆，近两个月的时间很快就结束了，时间总是过得很快，让人来不及记得发生过的事。这段时
      
    
    </summary>
    
    
      <category term="java" scheme="https://whllhw.xyz/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>idea git push 引起的血案</title>
    <link href="https://whllhw.xyz/posts/2018/08/26/idea%20git%20push%20%E5%BC%95%E8%B5%B7%E7%9A%84%E8%A1%80%E6%A1%88/"/>
    <id>https://whllhw.xyz/posts/2018/08/26/idea git push 引起的血案/</id>
    <published>2018-08-26T14:21:58.000Z</published>
    <updated>2019-04-14T13:05:21.936Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>操作不当导致一天内写的代码丢失，最后依靠 idea 的本地历史（local history）找回。</p></blockquote><p>过程：</p><ol><li>使用 idea 的 VSC 工具进行 git commit （用这个主要是这个带有自动整理代码，优化导入的功能，还会分析代码）</li><li>想了想应该只有我有最新的版本了，别人不会有更新的。于是直接点开 git push （以前都是先使用 git pull 的，这次脑残了）</li><li>提示有冲突，是否进行合并，选择是，自动合并完毕后。编译代码失败。一看，我一天写的写的定时消息通知不见了。</li><li>我的妈啊，怎么直接没了，赶紧打开 bash 用 <code>git reflog</code> 结果如下：（有两处的 commit 信息是 add: 加入各处通知）</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/TIM截图20180828233327.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol start="4"><li><code>ee2fa85</code> 直接变成了 merge 节点，而且我的提交直接就没有了，恢复不了。<code>git reset --hard</code> 只能回到原来的版本，但是记录里面根本没有我提交的版本</li><li>救命稻草：idea 本地历史，idea 提供了磁盘上所有文件的修改记录，并且标注了时间，after push 、build 的操作就记录了下来，（这么吃内存也是有好处）于是我凭记忆恢复了我一天写的代码。</li><li>最后再提交、推送到远程库</li></ol><ul><li>从 gitea 上面的提交图来看，也说明了这次血案的原因</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/TIM截图20180828232021.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>由提交图可以看到，我提交了一个 merge 节点，用于自动合并与其他人的代码版本。这个节点应该是 git 自动生成的，提交信息里面应该有 merge branch 字样，但是这个提交直接用我的 commit 信息了。</p><hr><p>其实还有点疑惑的地方，有时间复现一下，看一看到底是怎么回事。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;操作不当导致一天内写的代码丢失，最后依靠 idea 的本地历史（local history）找回。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 idea 的 VSC 工具进行 git commit （用这个主要
      
    
    </summary>
    
    
      <category term="git" scheme="https://whllhw.xyz/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>升级到 spring boot 2.0</title>
    <link href="https://whllhw.xyz/posts/2018/08/25/%E5%8D%87%E7%BA%A7%E5%88%B0%20spring%20boot%202.0/"/>
    <id>https://whllhw.xyz/posts/2018/08/25/升级到 spring boot 2.0/</id>
    <published>2018-08-24T16:48:07.000Z</published>
    <updated>2019-04-14T13:05:21.922Z</updated>
    
    <content type="html"><![CDATA[<p>spring boot 2.0 版本出了有一段时间了，当然是要用一用了，把现在在写的项目升级一波。当然升级前是看了一下别人的博客 <a href="http://tengj.top/2018/07/23/springboot2to1/" target="_blank" rel="noopener">http://tengj.top/2018/07/23/springboot2to1/</a> 。（怎么感觉有质量的博客越来越少，剩下的就是在互相“引用”，搜出来基本一模一样，国内某搜索引擎更加差劲，还是自己抽时间看文档比较好）本篇持续更新（随缘）</p><hr><ul><li>首先在 pom.xml 中修改 1.5.10 为 2.0.4 （项目要求稳定一点，也不能太激进。）</li><li>idea 下载依赖的时候，手动运行 mvn clean 等命令下载依赖，不然会出现 idea 依赖下完，还是不能构建，至今不知道为什么，是什么 bug</li></ul><p>2.0 中的更改：</p><ol><li>删除 repository 的 findOne ，导致以前使用的 findOne 不能使用，直接替换为 getOne 会出现以下问题：</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/gson.png" alt="getOne 返回代理类HibernateProxy，进行序列化时出错，提示添加适配器。" title="">                </div>                <div class="image-caption">getOne 返回代理类HibernateProxy，进行序列化时出错，提示添加适配器。</div>            </figure><p>简单解决：<br>用 findById 回避代理类，但是这个接口又被改成返回 <code>Optional&lt;S&gt;</code> 必须使用 get() 来获取 实体。Optional 要求内容非空，否则使用 get() 方法会抛出异常 NoSuchElementException ，优雅了解决空指针异常。</p><ol start="2"><li>new PageRequest 不推荐使用 @Depreacted ，直接更换为静态方法  PageRequest.of，点进去看是返回 new PageRequest 。（之前在 1.5 好像就是不推荐用 of 静态方法，现在又改回来了）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;spring boot 2.0 版本出了有一段时间了，当然是要用一用了，把现在在写的项目升级一波。当然升级前是看了一下别人的博客 &lt;a href=&quot;http://tengj.top/2018/07/23/springboot2to1/&quot; target=&quot;_blank&quot; re
      
    
    </summary>
    
    
      <category term="spring boot" scheme="https://whllhw.xyz/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>重装系统后要做的事情</title>
    <link href="https://whllhw.xyz/posts/2018/08/06/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8E%E8%A6%81%E5%81%9A%E7%9A%84%E4%BA%8B%E6%83%85/"/>
    <id>https://whllhw.xyz/posts/2018/08/06/重装系统后要做的事情/</id>
    <published>2018-08-06T01:39:41.000Z</published>
    <updated>2019-04-14T13:05:21.909Z</updated>
    
    <content type="html"><![CDATA[<ul><li>前一阵子参加信息院的安全竞赛，竟然获得了一个固态硬盘。马上装上 win10 体验一波。原来买电脑的时候就是装的 win10，后面各种卡顿（年少无知，非要去电脑城买），直接换成 win7。最近 win7爆出使用数量下降，肯定是电脑更新换代，都是预装 win10。ok，不多说了，进入主题。</li><li>进入 win10 后，要求登录 Microsoft 账号，BABALA填完后，进入等待桌面加载。动画效果确实好，比 win7 更加炫酷。但是开始菜单多了很多用不到的东西和用不了到的东西比如 OneNote、天气、新闻、联系人…所以第一步：卸载这些无用的东西。</li><li>由于我以前将用户数据和系统分离，为了少安装一些常用的软件，通常把用户文档、桌面移动到其他盘，在新系统上设置一下就恢复了快捷访问。</li><li>其他的不多说了，就是安装一些非绿色版，要修改注册表的软件，杀毒软件、 office 等等，调整系统设置<br>（ok，这是一个月之前的事情了，我很多都忘了。win10游戏时输入法无法打字，以及 windows defender 一直偷cpu，一气之下格式化C盘。下面才是我现在在用的重装过后的win7）</li><li><em>详细列一下开发要设置的东西，便于以后查阅</em>：</li></ul><ol><li>安装运行库。这些都没有自带，给差评。visual c   redistributable ，DirectX，.net framework 等等。推荐一个软件<a href="https://www.iplaysoft.com/aio-runtimes.html" target="_blank" rel="noopener">All in One Runtimes</a>可以直接安装以上的运行库。</li><li>可绿色运行的开发软件添加一下系统路径。如  python3 (python2出现并发数设置不对的错误，估计是配置文件放在了系统盘上)，jetbrain（导入以前的设置，还有登录账号激活），nodejs（包括.\node_modules\.bin）</li><li>listary 效率工具设置自启动（有了它桌面都可以不要，只要你知道要用什么软件，直接键入名称即可启动），bandizip 添加文件关联，sublime vscode notepad</li><li>重新安装一下git，虽然可以是绿色版本，但是使用系统自带的cmd真的好丑。使用 git-bash 就好一点了</li><li>复制一下服务器私钥到用户主目录下，这样 ssh 就不用输密码了。</li><li>安装 chrome，有时候 google 打不开，只能去各软件广告商下载。再手动导入科学插件，最后登录账号，基本就结束了。<br>现在做的事情基本就这么多，过几天有新东西再更新。</li></ol><hr><p>更新：</p><ol><li>安装 Office 2016 使用 <a href="https://github.com/officetoolplus/OTool" target="_blank" rel="noopener">https://github.com/officetoolplus/OTool</a> 服务器上安装 docker 版本的 vlmcsd 授权激活，但是在 office 上无法登陆账号，朋友的 Office 2019 可以用。一直没找到原因。</li><li>finallshell 可以加速海外服务器的访问，看了一下 last 命令，是有两个账号同时登陆，查 ip 是阿里云香港，进行了转发，效果好了很多。</li><li>MobaXterm 分屏同时多个终端输入，管理服务器真的不要太爽，比 putty 好用多了。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;前一阵子参加信息院的安全竞赛，竟然获得了一个固态硬盘。马上装上 win10 体验一波。原来买电脑的时候就是装的 win10，后面各种卡顿（年少无知，非要去电脑城买），直接换成 win7。最近 win7爆出使用数量下降，肯定是电脑更新换代，都是预装 win10。o
      
    
    </summary>
    
    
      <category term="电脑" scheme="https://whllhw.xyz/tags/%E7%94%B5%E8%84%91/"/>
    
  </entry>
  
  <entry>
    <title>Spring boot 笔记</title>
    <link href="https://whllhw.xyz/posts/2018/03/21/Spring%20boot%20%E7%AC%94%E8%AE%B0/"/>
    <id>https://whllhw.xyz/posts/2018/03/21/Spring boot 笔记/</id>
    <published>2018-03-21T14:19:59.000Z</published>
    <updated>2019-04-14T13:05:21.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jpa">JPA</h2><ul><li><p>中文乱码</p><ol><li>检查数据库编码<ul><li><code>show variables like 'character_set_database';</code>–查看该数据库使用的编码</li><li><code>alter database &lt;数据库名&gt; CHARACTER SET utf8;</code>–修改编码为utf8</li><li><code>show create table &lt;表名&gt;;</code>–查询表的编码，默认为：latin1</li><li><code>alter table &lt;表名&gt; character set utf8;</code>–修改表的编码</li></ul></li><li>检查JPA连接配置<ul><li>spring.datasource.url后面加上<code>characterEncoding=utf-8</code>参数</li></ul></li></ol><p><strong>ps：后面才知道mysql的utf8是假的，只支持三字节的编码，utf8mb4才是现在称的真正utf8</strong></p></li></ul><h2 id="view-object">View Object</h2><p>因为前端要的字段可能跟数据库里的不同，或者要其他的数据，都在一个接口处返回，或者嵌套对象返回。<br>解决方法是使用一大片 getter setter for 语句来处理，代码极其不好看。于是花半天时间查阅 <a href="https://docs.spring.io/spring-data/jpa/docs/1.11.13.RELEASE/reference/html/#projections" target="_blank" rel="noopener">jpa</a> 文档，发现可以用到 VO 来解决这些问题。<br>这里直接就贴上代码看一下就ok了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CompreGradeItem</span> </span>&#123;</span><br><span class="line">    <span class="function">Integer <span class="title">getCompreRank</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// more...与数据库字段相同的直接写 get 方法</span></span><br><span class="line"><span class="comment">// 使用Value注解，获取到对象内的成员</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;target.student.major&#125;"</span>)</span><br><span class="line">    <span class="function">String <span class="title">getMajor</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 新建的键值对，可以利用 spel 实现简单的处理</span></span><br><span class="line"><span class="comment">// 要实现高级自定义，则编写自己的 bean 可以实现任意逻辑（下面一个）</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;@compreGradeBean.getAddGroup(target)&#125;"</span>)</span><br><span class="line">    <span class="function">List&lt;Object&gt; <span class="title">getAddGroup</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompreGradeBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CompreAddGradeRepository compreAddGradeRepository;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AwardBean awardBean;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CompreGradeBean</span><span class="params">(CompreAddGradeRepository compreAddGradeRepository, AwardBean awardBean)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.compreAddGradeRepository = compreAddGradeRepository;</span><br><span class="line">        <span class="keyword">this</span>.awardBean = awardBean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">getAddGroup</span><span class="params">(CompreGradeEntity compreGradeEntity)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 在这里编写自定义的方法，可以再进行查询。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CompreGradeRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">CompreGradeEntity</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Page&lt;CompreGradeItem&gt; <span class="title">findAllByStudentMajorLikeAndStudentStuClassLikeAndYearTerm</span><span class="params">(String major,String stuClass,String yearTerm,Pageable pageable)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>更新：<br>用这种方法，由于 jpa 无法预知程序员想要留下的字段，所以直接全部字段都查询出来，数据量少应该无所谓，但是最好还是写 nativeQuery 这样数据库压力会小点，但是返回的是 <code>List&lt;Object[]&gt;</code> 映射字段名就麻烦了。用 setter ？不存在的。尽量避免写出无意义，而且容易出错的代码<br>下面说一下我正在使用的方法：<br>配合 java 8 的特性 stream 实现字段映射：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要映射的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassForm</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String A;</span><br><span class="line"><span class="keyword">private</span> String B;</span><br><span class="line"><span class="comment">// 这里是一个需要调用 bean 的一个参数</span></span><br><span class="line"><span class="keyword">private</span> String C;</span><br><span class="line"><span class="comment">//   getter   setter</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ClassForm <span class="title">map</span><span class="params">(Object[] i)</span></span>&#123;</span><br><span class="line">ClassForm tmp = <span class="keyword">new</span> ClassForm();</span><br><span class="line">tmp.setA(i[<span class="number">0</span>]);</span><br><span class="line">tmp.setB(i[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 模仿流式 api</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ClassForm <span class="title">setC</span><span class="params">(String c)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.C = c;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在外层调用的时候</span></span><br><span class="line">List&lt;Object[]&gt; x = repository.findAllByXXX(xxx);</span><br><span class="line">List&lt;ClassForm&gt; r = x.stream().map(s-&gt;ClassForm.map(s).setC(myBean.getC(s[<span class="number">2</span>]))).Collect(Collector.toList());</span><br><span class="line"><span class="comment">// 随后 r 就可以通过反射 API，自动生成 JSON 数据了</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;jpa&quot;&gt;JPA&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;中文乱码&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;检查数据库编码
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;show variables like &#39;character_set_database&#39;;&lt;/code&gt;–查看该数据库使用的编码
      
    
    </summary>
    
    
      <category term="spring boot" scheme="https://whllhw.xyz/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>数据结构实验——全栈的体验</title>
    <link href="https://whllhw.xyz/posts/2017/12/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E2%80%94%E2%80%94%E5%85%A8%E6%A0%88%E7%9A%84%E4%BD%93%E9%AA%8C/"/>
    <id>https://whllhw.xyz/posts/2017/12/15/数据结构实验——全栈的体验/</id>
    <published>2017-12-15T03:57:56.000Z</published>
    <updated>2019-04-14T13:05:21.536Z</updated>
    
    <content type="html"><![CDATA[<h1>#全栈开发感想</h1><h2 id="摘要">##摘要</h2><p>以前一直是学习后端开发，使用简单的 <code>flask</code> 框架进行开发，前端的网页要不就是没有，要不就是抄别人现成的网页，只是把<code>ajax</code>请求地址改成自己的。开发一些玩具类似的东西还是挺快的。</p><h2 id="背景">##背景</h2><p>现在突然有个课设项目，大佬要跟我组队，不过他也不会前端的东西，我知道也是浅尝辄止。见过许多华丽的网页，自己却写不出来。我让他先去看一看网页相关的库，上上w3school 先入入门。过了几天，结果他就直接用上bootstrap写出页面的布局了。还把要使用到的图形库，及其插件给找到了。以前我是没有弄过页面布局，我后面又去看栅格布局，bootstrap是如何进行布局，以及响应式布局的（虽然这个项目用不上）</p><p>自己学习过Python相关的Web开发框架，写起来就不是很吃力，基本查查文档就行了。他拿着我的代码却无从下手。数据库方面我也是直接 sql 语句写的，使用零配置的sqlite3 加快进度。他开始可能也没懂相关的地方，结果到他的电脑就出问题了，找不到我建立的数据库表。他弄了很久，后面查到是Pycharm的路径没有设置，由于sqlite打开不存在的数据文件时不会报错，直接新建了一个新的文件。应该就直接访问用户的目录去了，但是由于是没有建立表，查询就会出错。</p><h3 id="总结">###总结</h3><p>关于团队协作，以前写一点玩具都是自己在写，没有用团队协作的东西（最多也就用Git 来同步我在服务器写的代码了）。项目开始前，是我写前端和后端比较多，队友写算法（他还研究了C  与Python连接的问题，开始用boost ，后面直接就ctypes）</p><h3 id="1-代码同步问题：">1.  代码同步问题：</h3><p>一开始，每个人写的功能不一样，代码几乎不需要同步。到后面对接才发现没有代码同步，TIM传文件真的很烦人，以为项目快结束了，然而后面的bug修复，文件传输就越来越多。不得已在最后使用了Git，前面费的时间要早用git 就不会白白费在传文件上。</p><h3 id="2-整体项目的架构：">2.  整体项目的架构：</h3><p>由于还是缺乏对团队项目的整体规划缺少实战的经验，一开始就没有认真考虑出完整的构思，只有大概的想象，放在后面对接时就费了不少的功夫，要是稍有一点整体的构想，就不会到后面的改了又改，后端数据库和前端对接不上，又要去调试代码。功能到后面想添加就得重写代码</p><h3 id="3-调试工具的使用：">3.  调试工具的使用：</h3><p>学会看输出。调试工具方便了测试，找bug。客户端网络请求，和后台数据匹配就清晰可见。由于使用了很多的前端相关库，一旦有错误就会抛出错误。就可以在相关的代码行数查看，动态修改执行的语句，和页面上的DOM，JQuery还是一如既往的强大，封装的方法很全，写起来很快。JS语言的强大，与灵活，赋予了编码很大的自由度，当然需要极高的操作才可以把握这个度。</p><h3 id="4-软件工程方面的理论支撑：">4.  软件工程方面的理论支撑：</h3><p>写玩具简单，但是真正做出能实际运用的东西就要思考了。编码也是写文章，写思想的，只不过表达形式不一样，文章用文字，用修辞手法，写作手法。而代码则是用计算机能够识别的文字，做一件事有不同的方法，用户看到的输出可能是一样的。但是代码放在哪里，何时执行却是编码时应该想清楚的。以前C  编写过程中，一个功能性类即有cin 又有cout这合适吗，执行功能就不应该和用户进行交互，交互应该交给合适的类去做。功能性的类应该只有接口，由外部调用，可抛出错误，返回值作为输出，或者由交互相关类处理后输出。这样做到系统的低耦合、高内聚。鲁棒性高。</p><h3 id="5-前端技术熟悉：">5.  前端技术熟悉：</h3><p>在项目中学习，能够加深理解。很多的技术都没接触过。这次让我知道页面的交互确实不简单，在命令行，对有技术的使用者会很熟悉。对无基础的则还是需要和谐的界面。和后端的交互使用ajax，http协议的熟悉，请求到后端的api地址，返回内容都是要考虑的，整个网页程序的统一，分工要明确。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;#全栈开发感想&lt;/h1&gt;
&lt;h2 id=&quot;摘要&quot;&gt;##摘要&lt;/h2&gt;
&lt;p&gt;以前一直是学习后端开发，使用简单的 &lt;code&gt;flask&lt;/code&gt; 框架进行开发，前端的网页要不就是没有，要不就是抄别人现成的网页，只是把&lt;code&gt;ajax&lt;/code&gt;请求地址改成自己的
      
    
    </summary>
    
    
      <category term="python, flask, js" scheme="https://whllhw.xyz/tags/python-flask-js/"/>
    
  </entry>
  
  <entry>
    <title>Git记录</title>
    <link href="https://whllhw.xyz/posts/2017/11/25/Git%E8%AE%B0%E5%BD%95/"/>
    <id>https://whllhw.xyz/posts/2017/11/25/Git记录/</id>
    <published>2017-11-25T12:02:36.000Z</published>
    <updated>2019-04-14T13:05:21.352Z</updated>
    
    <content type="html"><![CDATA[<h1>#Git 使用笔记</h1><p>克隆本分支，深度为1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone -b deploy_online --depth=1 git@github.com:whllhw/whllhw.github.io </span><br><span class="line">git push #提交代码直接push</span><br></pre></td></tr></table></figure><p>当已经存在.git文件夹时可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch -r # 显示远程分支</span><br><span class="line">git branch -a # 显示所有分支</span><br><span class="line">git checkout -b dev origin/deploy_online # 建立本地分支dev并切换为远程的deploy_online？待验证</span><br></pre></td></tr></table></figure><p>推送到远程其他分支时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:whllhw/whllhw.github.io #添加远程仓库</span><br><span class="line">git push --set-upstream origin master:passage #将本地的master分支提交到远程的passage</span><br><span class="line"># 以后每次提交都要使用 git push origin HEAD:passage 有点麻烦！</span><br><span class="line">    # 或者使用上面切换分支的方法 git checkout -b ... </span><br><span class="line"># 或者使用本地分支与远程分支相同(master 作为变量，为分支名)</span><br><span class="line">git push --set-upstream origin master #默认将本地master分支提交到远程的master</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;#Git 使用笔记&lt;/h1&gt;
&lt;p&gt;克隆本分支，深度为1&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span
      
    
    </summary>
    
    
      <category term="git, linux" scheme="https://whllhw.xyz/tags/git-linux/"/>
    
  </entry>
  
  <entry>
    <title>我的云上CentOS记录</title>
    <link href="https://whllhw.xyz/posts/2017/11/25/%E6%88%91%E7%9A%84%E4%BA%91%E4%B8%8ACentOS%E8%AE%B0%E5%BD%95/"/>
    <id>https://whllhw.xyz/posts/2017/11/25/我的云上CentOS记录/</id>
    <published>2017-11-25T11:55:27.000Z</published>
    <updated>2019-04-14T13:05:21.510Z</updated>
    
    <content type="html"><![CDATA[<h1>#使用CentOS笔记</h1><blockquote><p>在云上使用Centos，很多常用的命令不能直接用。软件仓库轻量化，也有导致使用不便。安装nginx 要添加源，才能直接安装，不然就是自己编译源代码。<br>将持续更新。。。</p></blockquote><h1>##使用常用命令</h1><p>Centos 安装编译工具包，很多在其他系统上直接安装的程序，都被包含进去，保证软件包仓库的纯净。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum groupinstall "Development Tools"</span><br></pre></td></tr></table></figure><p>nginx 配置重载<br><code>nginx -s reload</code><br>nginx 配置测试<br><code>nginx -t</code></p><p>查看本地端口使用情况</p><p><code>netstat -ntlp</code></p><p>结束进程</p><p><code>pkill {pidname}</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;#使用CentOS笔记&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;在云上使用Centos，很多常用的命令不能直接用。软件仓库轻量化，也有导致使用不便。安装nginx 要添加源，才能直接安装，不然就是自己编译源代码。&lt;br&gt;
将持续更新。。。&lt;/p&gt;
&lt;/blockquot
      
    
    </summary>
    
    
      <category term="centos, linux" scheme="https://whllhw.xyz/tags/centos-linux/"/>
    
  </entry>
  
  <entry>
    <title>Selenium 自动化测试框架</title>
    <link href="https://whllhw.xyz/posts/2017/09/21/Selenium%20%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    <id>https://whllhw.xyz/posts/2017/09/21/Selenium 自动化测试框架/</id>
    <published>2017-09-21T04:29:15.000Z</published>
    <updated>2019-04-14T13:05:21.403Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>比较快速的爬取一些网站，最快就是用这个框架，记录遇到的坑。</p></blockquote><p>查阅的<a href="https://selenium-python-zh.readthedocs.io/en/latest/locating-elements.html" title="中文文档" target="_blank" rel="noopener">中文文档</a>基本用法简单，但是高级的用法就是英文的，或者没有。这里记录一下。</p><a id="more"></a><hr><p><code>webdriver.Chrome('/path/to/chromedriver')</code></p><ul><li>加载驱动时要指定路径，不然提示没有找到驱动</li><li>在弹出的网页进行查找元素时，要使用切换窗口，不然提示NoSuchElementException</li></ul><p><code>driver.switch_to_window(driver.window_handles[-1])</code></p><ul><li>driver.page_source返回的是当前渲染后的网页的源码，可以进行保存</li><li>获取元素的内容 <code>element.text</code>返回str类型，包含当前元素下所有的内容</li><li>最后一个是json模块的锅：输出json到文件时居然还是\u开头的unicode，python3 还有编码问题？后面终于找到还要附加参数，心态爆炸</li></ul><p><code>f.write(json.dumps(data,indent=4,ensure_ascii=False))</code></p><ul><li><p>隐式等待，可以自制一个装饰器，重复调用</p><p>from <a href="http://selenium.webdriver.common.by" target="_blank" rel="noopener">selenium.webdriver.common.by</a> import By<br>from selenium.webdriver.support import expected_conditions as EC<br>from selenium.webdriver.support.ui import WebDriverWait<br>def wait(func):<br>def wrapper(*args,**kw):<br>return WebDriverWait(driver, 30).until(func(*args,**kw))<br>return wrapper<br>@wait<br>def find_element_by_xpath(xpath):<br>return  EC.presence_of_element_located((By.XPATH, xpath))<br>@wait<br>def find_elements_by_xpath(xpath):<br>return EC.presence_of_elements_located((By.XPATH, xpath))</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;比较快速的爬取一些网站，最快就是用这个框架，记录遇到的坑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;查阅的&lt;a href=&quot;https://selenium-python-zh.readthedocs.io/en/latest/locating-elements.html&quot; title=&quot;中文文档&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;中文文档&lt;/a&gt;基本用法简单，但是高级的用法就是英文的，或者没有。这里记录一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="selenium, python" scheme="https://whllhw.xyz/tags/selenium-python/"/>
    
  </entry>
  
  <entry>
    <title>使用Flask 中遇到的Python2 编码问题</title>
    <link href="https://whllhw.xyz/posts/2017/09/17/%E4%BD%BF%E7%94%A8Flask%20%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84Python2%20%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>https://whllhw.xyz/posts/2017/09/17/使用Flask 中遇到的Python2 编码问题/</id>
    <published>2017-09-17T08:47:49.000Z</published>
    <updated>2019-04-14T13:05:21.483Z</updated>
    
    <content type="html"><![CDATA[<h1>使用Flask 中遇到的Python2 编码问题</h1><blockquote><p>python2 的编码问题一直被开发者诟病，进行一些字符工作是确实会有点麻烦，而且新手不熟悉编码，更会踩坑里。</p></blockquote><p>开始前建议阅读 <a href="http://selfboot.cn/2016/12/28/py_encode_decode/" target="_blank" rel="noopener">Python2.x 字符编码终极指南</a>，或者搜索一下就有很多文章。</p><p>Python2 中的 str 类型可以看做是 byte 类型的数组，即是字节流。早期设计中并没有这么多的编码，后来版本提供一个 unicode类型来修复了这一类型。有如下关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unicode.encode(<span class="string">'utf-8'</span>) = str</span><br><span class="line">str.decode(<span class="string">'utf-8'</span>) = unicode</span><br></pre></td></tr></table></figure><p>Flask 中提交的表单 + MySQLdb + Mysql</p><ol><li>源文件中指明编码 #coding=utf-8</li><li>Mysql设置编码为utf8</li><li>MySQLdb 连接指定charset=‘utf8’，插入的代码如下</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g.db.execute(<span class="string">'insert into entries (title, text) values (&#123;&#125;, &#123;&#125;)'</span>.format(request.form[<span class="string">'title'</span>].encode(<span class="string">'utf-8'</span>), request.form[<span class="string">'text'</span>].encode(<span class="string">'utf-8'</span>)))</span><br></pre></td></tr></table></figure><p>request.form[‘title’] 的类型是Unicode，encode后应该就可以变成str了，可是<br>提示<code>OperationalError: (1054, &quot;Unknown column 'abc' in 'field list'&quot;)</code>英文都插入不了，然后经Stack Overflow启发，改动 { } =&gt; “{ }”，然后就可以运行了。。坑死了。</p><p>还有一个坑：<code>OperationalError: (2002, &quot;Can't connect to local MySQL server through socket '/var/lib/mysql/mysql.sock' (2)&quot;)</code></p><p>默认MySQLdb会在/var/lib/mysql 寻找sock，由于服务器的安装位置不是这里，查找mysql.sock发现在/tmp 目录下，创建MySQLdb连接时，指定unix_sock = /tmp/mysql.sock就可以连接了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;使用Flask 中遇到的Python2 编码问题&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;python2 的编码问题一直被开发者诟病，进行一些字符工作是确实会有点麻烦，而且新手不熟悉编码，更会踩坑里。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;开始前建议阅读 &lt;a hr
      
    
    </summary>
    
    
      <category term="flask, python" scheme="https://whllhw.xyz/tags/flask-python/"/>
    
  </entry>
  
</feed>
